#!/usr/bin/env python3
"""
Script de test pour la connexion MetaTrader 5
Teste la connexion au compte d√©mo MT5 et les fonctions de base
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
from trading.mt5_connector import MT5Connector
from utils.logger import TradingLogger

def test_mt5_connection():
    """Test complet de la connexion MT5"""
    logger = TradingLogger()
    
    print("=" * 60)
    print("üß™ TEST DE CONNEXION METATRADER 5")
    print("=" * 60)
    
    try:
        # Test 1: Initialisation du connecteur
        print("\n1Ô∏è‚É£ Test d'initialisation du connecteur MT5...")
        connector = MT5Connector()
        
        if connector.connected:
            print("‚úÖ Connexion MT5 r√©ussie!")
            print(f"   - Compte: #{connector.account_info.get('login', 'N/A')}")
            print(f"   - Serveur: {connector.account_info.get('server', 'N/A')}")
            print(f"   - Balance: {connector.account_info.get('balance', 0)} {connector.account_info.get('currency', 'USD')}")
            print(f"   - Type: {'D√©mo' if connector.account_info.get('trade_mode') == 0 else 'R√©el'}")
        else:
            print("‚ùå √âchec de connexion MT5")
            return False
        
        # Test 2: R√©cup√©ration des donn√©es historiques
        print("\n2Ô∏è‚É£ Test de r√©cup√©ration des donn√©es historiques...")
        symbol = "XAUUSD"  # Or/USD - symbole par d√©faut
        
        # Test diff√©rents timeframes
        timeframes = ['1m', '5m', '1h', '1d']
        for tf in timeframes:
            df = connector.get_historical_data(symbol, tf, 10)
            if not df.empty:
                print(f"‚úÖ Donn√©es {tf}: {len(df)} barres r√©cup√©r√©es")
                print(f"   - Dernier prix: {df['close'].iloc[-1]:.5f}")
            else:
                print(f"‚ùå √âchec r√©cup√©ration donn√©es {tf}")
        
        # Test 3: Prix actuel
        print("\n3Ô∏è‚É£ Test de r√©cup√©ration du prix actuel...")
        current_price = connector.get_current_price(symbol)
        if current_price > 0:
            print(f"‚úÖ Prix actuel {symbol}: {current_price:.5f}")
        else:
            print(f"‚ùå √âchec r√©cup√©ration prix {symbol}")
        
        # Test 4: Informations du symbole
        print("\n4Ô∏è‚É£ Test des informations du symbole...")
        symbol_info = connector.get_symbol_info(symbol)
        if symbol_info:
            print(f"‚úÖ Informations {symbol}:")
            print(f"   - Lot minimum: {symbol_info.get('min_lot', 'N/A')}")
            print(f"   - Lot maximum: {symbol_info.get('max_lot', 'N/A')}")
            print(f"   - Step: {symbol_info.get('lot_step', 'N/A')}")
            print(f"   - Point: {symbol_info.get('point', 'N/A')}")
            print(f"   - Digits: {symbol_info.get('digits', 'N/A')}")
        else:
            print(f"‚ùå √âchec r√©cup√©ration infos {symbol}")
        
        # Test 5: Informations du march√©
        print("\n5Ô∏è‚É£ Test des informations du march√©...")
        market_info = connector.get_market_info(symbol)
        if market_info:
            print(f"‚úÖ Informations march√© {symbol}:")
            print(f"   - Bid: {market_info.get('bid', 'N/A')}")
            print(f"   - Ask: {market_info.get('ask', 'N/A')}")
            print(f"   - Spread: {market_info.get('spread', 'N/A')}")
        else:
            print(f"‚ùå √âchec r√©cup√©ration infos march√© {symbol}")
        
        # Test 6: Calcul de taille de position
        print("\n6Ô∏è‚É£ Test de calcul de taille de position...")
        risk_amount = 100.0  # 100 USD de risque
        entry_price = current_price
        stop_loss = current_price - 0.0050  # 50 pips de SL
        
        position_size = connector.calculate_position_size(symbol, risk_amount, entry_price, stop_loss)
        if position_size > 0:
            print(f"‚úÖ Taille de position calcul√©e: {position_size:.2f} lots")
            print(f"   - Risque: {risk_amount} USD")
            print(f"   - SL distance: {abs(entry_price - stop_loss):.5f}")
        else:
            print("‚ùå √âchec calcul taille position")
        
        # Test 7: Positions et ordres (lecture seule)
        print("\n7Ô∏è‚É£ Test de lecture des positions et ordres...")
        positions = connector.get_positions()
        orders = connector.get_open_orders()
        
        print(f"‚úÖ Positions ouvertes: {len(positions)}")
        print(f"‚úÖ Ordres en attente: {len(orders)}")
        
        # Test 8: Mise √† jour du solde
        print("\n8Ô∏è‚É£ Test de mise √† jour du solde...")
        connector.update_balance()
        balance = connector.get_available_balance()
        print(f"‚úÖ Solde disponible: {balance:.2f}")
        
        # D√©connexion
        print("\n9Ô∏è‚É£ D√©connexion...")
        connector.disconnect()
        print("‚úÖ D√©connexion r√©ussie")
        
        print("\n" + "=" * 60)
        print("üéâ TOUS LES TESTS MT5 SONT PASS√âS AVEC SUCC√àS!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR DURANT LES TESTS: {e}")
        logger.error(f"Erreur test MT5: {e}")
        return False

def test_platform_selection():
    """Test de s√©lection de plateforme"""
    print("\n" + "=" * 60)
    print("üîÑ TEST DE S√âLECTION DE PLATEFORME")
    print("=" * 60)
    
    from trading.connector_factory import ConnectorFactory
    
    # Afficher les informations de la plateforme configur√©e
    platform_info = ConnectorFactory.get_platform_info()
    
    print(f"Plateforme configur√©e: {platform_info['platform'].upper()}")
    print(f"Type de compte: {platform_info['account_type'].upper()}")
    print(f"Symbole par d√©faut: {platform_info['symbol_default']}")
    print(f"N√©cessite cl√© API: {platform_info['requires_api_key']}")
    print(f"Support d√©mo: {platform_info['supports_demo']}")
    print(f"M√©thode de connexion: {platform_info['connection_method']}")
    
    if platform_info['platform'] == 'mt5':
        print("\n‚úÖ Configuration MT5 d√©tect√©e - Test de connexion...")
        return test_mt5_connection()
    else:
        print(f"\n‚ö†Ô∏è  Plateforme {platform_info['platform']} configur√©e")
        print("Pour tester MT5, modifiez TRADING_PLATFORM=mt5 dans votre .env")
        return True

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de connexion...")
    
    # Test de s√©lection de plateforme
    success = test_platform_selection()
    
    if success:
        print("\n‚úÖ Tests termin√©s avec succ√®s!")
        sys.exit(0)
    else:
        print("\n‚ùå √âchec des tests!")
        sys.exit(1)
